{"ast":null,"code":"var _jsxFileName = \"/Users/mz01-chinh/Desktop/reactjs-base-21-main/src/features/Auth/components/Register/index.jsx\",\n    _s = $RefreshSig$();\n\nimport { unwrapResult } from '@reduxjs/toolkit';\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { register } from '../../userSlice';\nimport RegisterForm from '../RegisterForm';\nimport PropTypes from 'prop-types';\nimport { useSnackbar } from 'notistack';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nRegister.propTypes = {\n  closeDialog: PropTypes.func\n};\n\nfunction Register(props) {\n  _s();\n\n  const dispatch = useDispatch();\n  const {\n    enqueueSnackbar\n  } = useSnackbar();\n\n  const showNoti = (message, variant) => {\n    enqueueSnackbar(message, {\n      variant: variant\n    });\n  };\n\n  const handleSubmit = async values => {\n    try {\n      //auto set usernam = email\n      values.username = values.email;\n      const action = register(values);\n      const resultAction = await dispatch(action);\n      const user = unwrapResult(resultAction); //close Dia log\n\n      const {\n        closeDialog\n      } = props;\n\n      if (closeDialog) {\n        closeDialog();\n      } //do something here when register success\n\n\n      console.log(user);\n      showNoti(\"Register successfully!ðŸŽ‰\", \"success\");\n    } catch (error) {\n      showNoti(error.message, \"error\");\n      console.log(\"error: \", error);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(RegisterForm, {\n      onSubmit: handleSubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Register, \"gFW77LDw5/uCs1KR8orr0ERSFsY=\", false, function () {\n  return [useDispatch, useSnackbar];\n});\n\n_c = Register;\nexport default Register;\n\nvar _c;\n\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"sources":["/Users/mz01-chinh/Desktop/reactjs-base-21-main/src/features/Auth/components/Register/index.jsx"],"names":["unwrapResult","React","useDispatch","register","RegisterForm","PropTypes","useSnackbar","Register","propTypes","closeDialog","func","props","dispatch","enqueueSnackbar","showNoti","message","variant","handleSubmit","values","username","email","action","resultAction","user","console","log","error"],"mappings":";;;AAAA,SAASA,YAAT,QAA6B,kBAA7B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,QAAT,QAAyB,iBAAzB;AACA,OAAOC,YAAP,MAAyB,iBAAzB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,WAAT,QAA4B,WAA5B;;AAGAC,QAAQ,CAACC,SAAT,GAAqB;AACjBC,EAAAA,WAAW,EAAEJ,SAAS,CAACK;AADN,CAArB;;AAIA,SAASH,QAAT,CAAkBI,KAAlB,EAAyB;AAAA;;AAErB,QAAMC,QAAQ,GAAGV,WAAW,EAA5B;AAEA,QAAM;AAAEW,IAAAA;AAAF,MAAsBP,WAAW,EAAvC;;AAEA,QAAMQ,QAAQ,GAAG,CAACC,OAAD,EAAUC,OAAV,KAAsB;AACnCH,IAAAA,eAAe,CAACE,OAAD,EAAU;AAAEC,MAAAA,OAAO,EAAEA;AAAX,KAAV,CAAf;AACH,GAFD;;AAIA,QAAMC,YAAY,GAAG,MAAOC,MAAP,IAAkB;AACnC,QAAI;AACA;AACAA,MAAAA,MAAM,CAACC,QAAP,GAAkBD,MAAM,CAACE,KAAzB;AACA,YAAMC,MAAM,GAAGlB,QAAQ,CAACe,MAAD,CAAvB;AACA,YAAMI,YAAY,GAAG,MAAMV,QAAQ,CAACS,MAAD,CAAnC;AACA,YAAME,IAAI,GAAGvB,YAAY,CAACsB,YAAD,CAAzB,CALA,CAOA;;AACA,YAAM;AAACb,QAAAA;AAAD,UAAgBE,KAAtB;;AACA,UAAGF,WAAH,EAAe;AACXA,QAAAA,WAAW;AACd,OAXD,CAYA;;;AACAe,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACAT,MAAAA,QAAQ,CAAC,0BAAD,EAA6B,SAA7B,CAAR;AACH,KAfD,CAeE,OAAOY,KAAP,EAAc;AACZZ,MAAAA,QAAQ,CAACY,KAAK,CAACX,OAAP,EAAgB,OAAhB,CAAR;AACAS,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBC,KAAvB;AACH;AACJ,GApBD;;AAsBA,sBACI;AAAA,2BACI,QAAC,YAAD;AAAc,MAAA,QAAQ,EAAET;AAAxB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH;;GArCQV,Q;UAEYL,W,EAEWI,W;;;KAJvBC,Q;AAuCT,eAAeA,QAAf","sourcesContent":["import { unwrapResult } from '@reduxjs/toolkit';\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { register } from '../../userSlice';\nimport RegisterForm from '../RegisterForm';\nimport PropTypes from 'prop-types'\nimport { useSnackbar } from 'notistack';\n\n\nRegister.propTypes = {\n    closeDialog: PropTypes.func\n};\n\nfunction Register(props) {\n\n    const dispatch = useDispatch();\n\n    const { enqueueSnackbar } = useSnackbar();\n\n    const showNoti = (message, variant) => {\n        enqueueSnackbar(message, { variant: variant })\n    }\n\n    const handleSubmit = async (values) => {\n        try {\n            //auto set usernam = email\n            values.username = values.email;\n            const action = register(values)\n            const resultAction = await dispatch(action);\n            const user = unwrapResult(resultAction);\n\n            //close Dia log\n            const {closeDialog} = props;\n            if(closeDialog){\n                closeDialog()\n            }\n            //do something here when register success\n            console.log(user)\n            showNoti(\"Register successfully!ðŸŽ‰\", \"success\");\n        } catch (error) {\n            showNoti(error.message, \"error\");\n            console.log(\"error: \", error)\n        }\n    }\n\n    return (\n        <div>\n            <RegisterForm onSubmit={handleSubmit} />\n        </div>\n    );\n}\n\nexport default Register;"]},"metadata":{},"sourceType":"module"}