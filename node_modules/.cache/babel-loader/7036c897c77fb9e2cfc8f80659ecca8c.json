{"ast":null,"code":"var _jsxFileName = \"/Users/mz01-chinh/Desktop/reactjs-base-21-main/src/features/Todo/pages/ListPage/index.jsx\",\n    _s = $RefreshSig$();\n\nimport { Button, makeStyles } from '@material-ui/core';\nimport queryString from 'query-string';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { useHistory, useLocation, useRouteMatch } from 'react-router-dom';\nimport TodoForm from '../../components/TodoForm';\nimport TodoList from '../../components/TodoList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  button: {\n    margin: theme.spacing(4, 2)\n  }\n}));\n\nfunction ListPage(props) {\n  _s();\n\n  const initTodoList = [{\n    id: 1,\n    title: 'Eat',\n    status: 'new'\n  }, {\n    id: 2,\n    title: 'Sleep',\n    status: 'completed'\n  }, {\n    id: 3,\n    title: 'Code',\n    status: 'new'\n  }, {\n    id: 4,\n    title: 'Play Game',\n    status: 'completed'\n  }];\n  const classes = useStyles();\n  const location = useLocation(); //lấy location hiện tại. location.search = ?status=\n\n  const history = useHistory(); //lấy history để thay đổi location hiện tại. \n\n  const match = useRouteMatch(); //sử dụng mathc để lấy path name hiện tại\n\n  const [todoList, setTodoList] = useState(initTodoList);\n  const [filterStatus, setFilterStatus] = useState(() => {\n    const params = queryString.parse(location.search);\n    return params.status || 'all';\n  });\n  useEffect(() => {\n    const params = queryString.parse(location.search);\n    setFilterStatus(params.status || 'all');\n  }, [location.search]); //khi location hiện tại hay đổi thì mình sẽ thực hiện useEffect\n\n  const handlerTodoClick = (todo, id) => {\n    //clone current array to the new array\n    const newTodoList = [...todoList]; //toggle state\n\n    let toggleTodo = null;\n    let index = 0;\n\n    for (let i = 0; i < newTodoList.length; i++) {\n      if (newTodoList[i].id === id) {\n        toggleTodo = newTodoList[i];\n        index = i;\n        break;\n      }\n    }\n\n    const newTodo = { ...newTodoList[index],\n      status: toggleTodo.status === 'new' ? 'completed' : 'new'\n    };\n    newTodoList[index] = newTodo; //update todo list\n\n    setTodoList(newTodoList);\n  };\n\n  const handleShowAllClick = () => {\n    const queryParams = {\n      status: 'all'\n    };\n    history.push({\n      pathname: match.path,\n      search: queryString.stringify(queryParams)\n    });\n  };\n\n  const handleShowCompletedClick = () => {\n    const queryParams = {\n      status: 'completed'\n    };\n    history.push({\n      pathname: match.path,\n      search: queryString.stringify(queryParams)\n    });\n  };\n\n  const handleShowNewClick = () => {\n    const queryParams = {\n      status: 'new'\n    };\n    history.push({\n      pathname: match.path,\n      search: queryString.stringify(queryParams)\n    });\n  };\n\n  const renderTodoList = useMemo(() => {\n    return todoList.filter(todo => filterStatus === 'all' || filterStatus === todo.status);\n  }, [todoList, filterStatus]);\n\n  const handleTodoFormSubmit = values => {\n    console.log(values);\n    const newTodo = {\n      id: todoList.length + 1,\n      title: values.title,\n      status: 'new'\n    };\n    const newTodoList = [...todoList, newTodo];\n    setTodoList(newTodoList);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(TodoForm, {\n      onSubmit: handleTodoFormSubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TodoList, {\n      todoList: renderTodoList,\n      onTodoClick: handlerTodoClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      className: classes.button,\n      color: \"primary\",\n      variant: \"contained\",\n      onClick: handleShowAllClick,\n      children: \"Show All\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      className: classes.button,\n      color: \"primary\",\n      variant: \"contained\",\n      onClick: handleShowCompletedClick,\n      children: \"Show Completed\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      className: classes.button,\n      color: \"primary\",\n      variant: \"contained\",\n      onClick: handleShowNewClick,\n      children: \"Show New\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ListPage, \"ysVXMCqVGL5FIypzJ4wQtzEzdCw=\", false, function () {\n  return [useStyles, useLocation, useHistory, useRouteMatch];\n});\n\n_c = ListPage;\nexport default ListPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"ListPage\");","map":{"version":3,"sources":["/Users/mz01-chinh/Desktop/reactjs-base-21-main/src/features/Todo/pages/ListPage/index.jsx"],"names":["Button","makeStyles","queryString","React","useEffect","useMemo","useState","useHistory","useLocation","useRouteMatch","TodoForm","TodoList","useStyles","theme","button","margin","spacing","ListPage","props","initTodoList","id","title","status","classes","location","history","match","todoList","setTodoList","filterStatus","setFilterStatus","params","parse","search","handlerTodoClick","todo","newTodoList","toggleTodo","index","i","length","newTodo","handleShowAllClick","queryParams","push","pathname","path","stringify","handleShowCompletedClick","handleShowNewClick","renderTodoList","filter","handleTodoFormSubmit","values","console","log"],"mappings":";;;AAAA,SAASA,MAAT,EAAiBC,UAAjB,QAAmC,mBAAnC;AACA,OAAOC,WAAP,MAAwB,cAAxB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,OAA3B,EAAoCC,QAApC,QAAoD,OAApD;AACA,SAASC,UAAT,EAAqBC,WAArB,EAAkCC,aAAlC,QAAuD,kBAAvD;AACA,OAAOC,QAAP,MAAqB,2BAArB;AACA,OAAOC,QAAP,MAAqB,2BAArB;;AAEA,MAAMC,SAAS,GAAGX,UAAU,CAAEY,KAAD,KAAY;AACrCC,EAAAA,MAAM,EAAE;AACJC,IAAAA,MAAM,EAAEF,KAAK,CAACG,OAAN,CAAc,CAAd,EAAiB,CAAjB;AADJ;AAD6B,CAAZ,CAAD,CAA5B;;AAOA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AAAA;;AAErB,QAAMC,YAAY,GAAG,CACjB;AACIC,IAAAA,EAAE,EAAE,CADR;AAEIC,IAAAA,KAAK,EAAE,KAFX;AAGIC,IAAAA,MAAM,EAAE;AAHZ,GADiB,EAMjB;AACIF,IAAAA,EAAE,EAAE,CADR;AAEIC,IAAAA,KAAK,EAAE,OAFX;AAGIC,IAAAA,MAAM,EAAE;AAHZ,GANiB,EAWjB;AACIF,IAAAA,EAAE,EAAE,CADR;AAEIC,IAAAA,KAAK,EAAE,MAFX;AAGIC,IAAAA,MAAM,EAAE;AAHZ,GAXiB,EAgBjB;AACIF,IAAAA,EAAE,EAAE,CADR;AAEIC,IAAAA,KAAK,EAAE,WAFX;AAGIC,IAAAA,MAAM,EAAE;AAHZ,GAhBiB,CAArB;AAuBA,QAAMC,OAAO,GAAGX,SAAS,EAAzB;AAGA,QAAMY,QAAQ,GAAGhB,WAAW,EAA5B,CA5BqB,CA4BW;;AAChC,QAAMiB,OAAO,GAAGlB,UAAU,EAA1B,CA7BqB,CA6BS;;AAC9B,QAAMmB,KAAK,GAAGjB,aAAa,EAA3B,CA9BqB,CA8BU;;AAC/B,QAAM,CAACkB,QAAD,EAAWC,WAAX,IAA0BtB,QAAQ,CAACa,YAAD,CAAxC;AACA,QAAM,CAACU,YAAD,EAAeC,eAAf,IAAkCxB,QAAQ,CAAC,MAAM;AACnD,UAAMyB,MAAM,GAAG7B,WAAW,CAAC8B,KAAZ,CAAkBR,QAAQ,CAACS,MAA3B,CAAf;AACA,WAAOF,MAAM,CAACT,MAAP,IAAiB,KAAxB;AACH,GAH+C,CAAhD;AAKAlB,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAM2B,MAAM,GAAG7B,WAAW,CAAC8B,KAAZ,CAAkBR,QAAQ,CAACS,MAA3B,CAAf;AACAH,IAAAA,eAAe,CAACC,MAAM,CAACT,MAAP,IAAiB,KAAlB,CAAf;AACH,GAHQ,EAGN,CAACE,QAAQ,CAACS,MAAV,CAHM,CAAT,CArCqB,CAwCC;;AAGtB,QAAMC,gBAAgB,GAAG,CAACC,IAAD,EAAOf,EAAP,KAAc;AACnC;AACA,UAAMgB,WAAW,GAAG,CAAC,GAAGT,QAAJ,CAApB,CAFmC,CAGnC;;AACA,QAAIU,UAAU,GAAG,IAAjB;AACA,QAAIC,KAAK,GAAG,CAAZ;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,WAAW,CAACI,MAAhC,EAAwCD,CAAC,EAAzC,EAA6C;AACzC,UAAIH,WAAW,CAACG,CAAD,CAAX,CAAenB,EAAf,KAAsBA,EAA1B,EAA8B;AAC1BiB,QAAAA,UAAU,GAAGD,WAAW,CAACG,CAAD,CAAxB;AACAD,QAAAA,KAAK,GAAGC,CAAR;AACA;AACH;AACJ;;AACD,UAAME,OAAO,GAAG,EACZ,GAAGL,WAAW,CAACE,KAAD,CADF;AAEZhB,MAAAA,MAAM,EAAEe,UAAU,CAACf,MAAX,KAAsB,KAAtB,GAA8B,WAA9B,GAA4C;AAFxC,KAAhB;AAIAc,IAAAA,WAAW,CAACE,KAAD,CAAX,GAAqBG,OAArB,CAjBmC,CAkBnC;;AACAb,IAAAA,WAAW,CAACQ,WAAD,CAAX;AACH,GApBD;;AAsBA,QAAMM,kBAAkB,GAAG,MAAM;AAC7B,UAAMC,WAAW,GAAG;AAAErB,MAAAA,MAAM,EAAE;AAAV,KAApB;AACAG,IAAAA,OAAO,CAACmB,IAAR,CAAa;AACTC,MAAAA,QAAQ,EAAEnB,KAAK,CAACoB,IADP;AAETb,MAAAA,MAAM,EAAE/B,WAAW,CAAC6C,SAAZ,CAAsBJ,WAAtB;AAFC,KAAb;AAIH,GAND;;AAQA,QAAMK,wBAAwB,GAAG,MAAM;AACnC,UAAML,WAAW,GAAG;AAAErB,MAAAA,MAAM,EAAE;AAAV,KAApB;AACAG,IAAAA,OAAO,CAACmB,IAAR,CAAa;AACTC,MAAAA,QAAQ,EAAEnB,KAAK,CAACoB,IADP;AAETb,MAAAA,MAAM,EAAE/B,WAAW,CAAC6C,SAAZ,CAAsBJ,WAAtB;AAFC,KAAb;AAIH,GAND;;AAOA,QAAMM,kBAAkB,GAAG,MAAM;AAC7B,UAAMN,WAAW,GAAG;AAAErB,MAAAA,MAAM,EAAE;AAAV,KAApB;AACAG,IAAAA,OAAO,CAACmB,IAAR,CAAa;AACTC,MAAAA,QAAQ,EAAEnB,KAAK,CAACoB,IADP;AAETb,MAAAA,MAAM,EAAE/B,WAAW,CAAC6C,SAAZ,CAAsBJ,WAAtB;AAFC,KAAb;AAIH,GAND;;AAQA,QAAMO,cAAc,GAAG7C,OAAO,CAAC,MAAM;AACjC,WAAOsB,QAAQ,CAACwB,MAAT,CAAgBhB,IAAI,IAAIN,YAAY,KAAK,KAAjB,IAA0BA,YAAY,KAAKM,IAAI,CAACb,MAAxE,CAAP;AACH,GAF6B,EAE3B,CAACK,QAAD,EAAWE,YAAX,CAF2B,CAA9B;;AAKA,QAAMuB,oBAAoB,GAAIC,MAAD,IAAY;AACrCC,IAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACA,UAAMZ,OAAO,GAAG;AACZrB,MAAAA,EAAE,EAAEO,QAAQ,CAACa,MAAT,GAAgB,CADR;AAEZnB,MAAAA,KAAK,EAAEgC,MAAM,CAAChC,KAFF;AAGZC,MAAAA,MAAM,EAAE;AAHI,KAAhB;AAMA,UAAMc,WAAW,GAAG,CAAC,GAAGT,QAAJ,EAAcc,OAAd,CAApB;AACAb,IAAAA,WAAW,CAACQ,WAAD,CAAX;AACH,GAVD;;AAYA,sBACI;AAAA,4BACI,QAAC,QAAD;AAAU,MAAA,QAAQ,EAAEgB;AAApB;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,QAAD;AAAU,MAAA,QAAQ,EAAEF,cAApB;AAAoC,MAAA,WAAW,EAAEhB;AAAjD;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI,QAAC,MAAD;AAAQ,MAAA,SAAS,EAAEX,OAAO,CAACT,MAA3B;AAAmC,MAAA,KAAK,EAAC,SAAzC;AAAoD,MAAA,OAAO,EAAC,WAA5D;AAAwE,MAAA,OAAO,EAAE4B,kBAAjF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHJ,eAII,QAAC,MAAD;AAAQ,MAAA,SAAS,EAAEnB,OAAO,CAACT,MAA3B;AAAmC,MAAA,KAAK,EAAC,SAAzC;AAAoD,MAAA,OAAO,EAAC,WAA5D;AAAwE,MAAA,OAAO,EAAEkC,wBAAjF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJJ,eAKI,QAAC,MAAD;AAAQ,MAAA,SAAS,EAAEzB,OAAO,CAACT,MAA3B;AAAmC,MAAA,KAAK,EAAC,SAAzC;AAAoD,MAAA,OAAO,EAAC,WAA5D;AAAwE,MAAA,OAAO,EAAEmC,kBAAjF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YALJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AASH;;GAlHQhC,Q;UAyBWL,S,EAGCJ,W,EACDD,U,EACFE,a;;;KA9BTQ,Q;AAoHT,eAAeA,QAAf","sourcesContent":["import { Button, makeStyles } from '@material-ui/core';\nimport queryString from 'query-string';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { useHistory, useLocation, useRouteMatch } from 'react-router-dom';\nimport TodoForm from '../../components/TodoForm';\nimport TodoList from '../../components/TodoList';\n\nconst useStyles = makeStyles((theme) => ({ \n    button: {\n        margin: theme.spacing(4, 2),\n    },\n}))\n\n\nfunction ListPage(props) {\n\n    const initTodoList = [\n        {\n            id: 1,\n            title: 'Eat',\n            status: 'new',\n        },\n        {\n            id: 2,\n            title: 'Sleep',\n            status: 'completed',\n        },\n        {\n            id: 3,\n            title: 'Code',\n            status: 'new',\n        },\n        {\n            id: 4,\n            title: 'Play Game',\n            status: 'completed',\n        },\n    ]\n\n    const classes = useStyles();\n\n\n    const location = useLocation(); //lấy location hiện tại. location.search = ?status=\n    const history = useHistory(); //lấy history để thay đổi location hiện tại. \n    const match = useRouteMatch(); //sử dụng mathc để lấy path name hiện tại\n    const [todoList, setTodoList] = useState(initTodoList);\n    const [filterStatus, setFilterStatus] = useState(() => {\n        const params = queryString.parse(location.search);\n        return params.status || 'all';\n    });\n\n    useEffect(() => {\n        const params = queryString.parse(location.search);\n        setFilterStatus(params.status || 'all')\n    }, [location.search]) //khi location hiện tại hay đổi thì mình sẽ thực hiện useEffect\n\n\n    const handlerTodoClick = (todo, id) => {\n        //clone current array to the new array\n        const newTodoList = [...todoList]\n        //toggle state\n        let toggleTodo = null;\n        let index = 0;\n        for (let i = 0; i < newTodoList.length; i++) {\n            if (newTodoList[i].id === id) {\n                toggleTodo = newTodoList[i];\n                index = i;\n                break;\n            }\n        }\n        const newTodo = {\n            ...newTodoList[index],\n            status: toggleTodo.status === 'new' ? 'completed' : 'new',\n        }\n        newTodoList[index] = newTodo\n        //update todo list\n        setTodoList(newTodoList)\n    }\n\n    const handleShowAllClick = () => {\n        const queryParams = { status: 'all' }\n        history.push({\n            pathname: match.path,\n            search: queryString.stringify(queryParams),\n        })\n    }\n\n    const handleShowCompletedClick = () => {\n        const queryParams = { status: 'completed' }\n        history.push({\n            pathname: match.path,\n            search: queryString.stringify(queryParams),\n        })\n    }\n    const handleShowNewClick = () => {\n        const queryParams = { status: 'new' }\n        history.push({\n            pathname: match.path,\n            search: queryString.stringify(queryParams),\n        })\n    }\n\n    const renderTodoList = useMemo(() => {\n        return todoList.filter(todo => filterStatus === 'all' || filterStatus === todo.status);\n    }, [todoList, filterStatus])\n\n\n    const handleTodoFormSubmit = (values) => {\n        console.log(values)\n        const newTodo = {\n            id: todoList.length+1,\n            title: values.title,\n            status: 'new'\n        }\n\n        const newTodoList = [...todoList, newTodo]\n        setTodoList(newTodoList)\n    }\n\n    return (\n        <div>\n            <TodoForm onSubmit={handleTodoFormSubmit}/>\n            <TodoList todoList={renderTodoList} onTodoClick={handlerTodoClick} />\n            <Button className={classes.button} color=\"primary\"  variant=\"contained\" onClick={handleShowAllClick}>Show All</Button>\n            <Button className={classes.button} color=\"primary\"  variant=\"contained\" onClick={handleShowCompletedClick}>Show Completed</Button>\n            <Button className={classes.button} color=\"primary\"  variant=\"contained\" onClick={handleShowNewClick}>Show New</Button>\n        </div>\n    );\n}\n\nexport default ListPage;"]},"metadata":{},"sourceType":"module"}