{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport userApi from '../../api/useApi';\nimport StorageKeys from '../../constants/storage-keys';\nexport const register = createAsyncThunk('users/register', async payload => {\n  //call api to register\n  const data = await userApi.register(payload); //save data to local storage\n\n  localStorage.setItem(StorageKeys.TOKEN, data.jwt);\n  localStorage.setItem(StorageKeys.USER, JSON.stringify(data.user));\n  return data.user;\n});\nexport const login = createAsyncThunk('users/login', async payload => {\n  //call api to register\n  const data = await userApi.login(payload); //save data to local storage\n\n  localStorage.setItem(StorageKeys.TOKEN, data.jwt);\n  localStorage.setItem(StorageKeys.USER, JSON.stringify(data.user));\n  return data.user;\n});\nconst userSlice = createSlice({\n  name: 'user',\n  initialState: {\n    current: JSON.parse(localStorage.getItem(StorageKeys.USER)) || {},\n    settings: {}\n  },\n  reducers: {\n    logout(state) {\n      //clear local storage\n      state.current = {};\n      localStorage.removeItem(StorageKeys.USER);\n      localStorage.removeItem(StorageKeys.TOKEN);\n    }\n\n  },\n  extraReducers: {\n    //'user/register/fulfilled': () => {}\n    [register.fulfilled]: (state, action) => {\n      state.current = action.payload;\n    },\n    [login.fulfilled]: (state, action) => {\n      state.current = action.payload;\n    }\n  }\n});\nconst {\n  actions,\n  reducer\n} = userSlice;\nexport const {\n  logout\n} = actions;\nexport default reducer;","map":{"version":3,"sources":["/Users/mz01-chinh/Desktop/reactjs-base-21-main/src/features/Auth/userSlice.js"],"names":["createAsyncThunk","createSlice","userApi","StorageKeys","register","payload","data","localStorage","setItem","TOKEN","jwt","USER","JSON","stringify","user","login","userSlice","name","initialState","current","parse","getItem","settings","reducers","logout","state","removeItem","extraReducers","fulfilled","action","actions","reducer"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,OAAOC,OAAP,MAAoB,kBAApB;AACA,OAAOC,WAAP,MAAwB,8BAAxB;AAGA,OAAO,MAAMC,QAAQ,GAAGJ,gBAAgB,CACpC,gBADoC,EAEpC,MAAOK,OAAP,IAAmB;AACf;AACA,QAAMC,IAAI,GAAG,MAAMJ,OAAO,CAACE,QAAR,CAAiBC,OAAjB,CAAnB,CAFe,CAGf;;AACAE,EAAAA,YAAY,CAACC,OAAb,CAAqBL,WAAW,CAACM,KAAjC,EAAwCH,IAAI,CAACI,GAA7C;AACAH,EAAAA,YAAY,CAACC,OAAb,CAAqBL,WAAW,CAACQ,IAAjC,EAAuCC,IAAI,CAACC,SAAL,CAAeP,IAAI,CAACQ,IAApB,CAAvC;AACA,SAAOR,IAAI,CAACQ,IAAZ;AACH,CATmC,CAAjC;AAaP,OAAO,MAAMC,KAAK,GAAGf,gBAAgB,CACjC,aADiC,EAEjC,MAAOK,OAAP,IAAmB;AACf;AACA,QAAMC,IAAI,GAAG,MAAMJ,OAAO,CAACa,KAAR,CAAcV,OAAd,CAAnB,CAFe,CAGf;;AACAE,EAAAA,YAAY,CAACC,OAAb,CAAqBL,WAAW,CAACM,KAAjC,EAAwCH,IAAI,CAACI,GAA7C;AACAH,EAAAA,YAAY,CAACC,OAAb,CAAqBL,WAAW,CAACQ,IAAjC,EAAuCC,IAAI,CAACC,SAAL,CAAeP,IAAI,CAACQ,IAApB,CAAvC;AACA,SAAOR,IAAI,CAACQ,IAAZ;AACH,CATgC,CAA9B;AAYP,MAAME,SAAS,GAAGf,WAAW,CAAC;AAC1BgB,EAAAA,IAAI,EAAE,MADoB;AAE1BC,EAAAA,YAAY,EAAE;AACVC,IAAAA,OAAO,EAAEP,IAAI,CAACQ,KAAL,CAAWb,YAAY,CAACc,OAAb,CAAqBlB,WAAW,CAACQ,IAAjC,CAAX,KAAsD,EADrD;AAEVW,IAAAA,QAAQ,EAAE;AAFA,GAFY;AAM1BC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,MAAM,CAACC,KAAD,EAAQ;AACV;AACAA,MAAAA,KAAK,CAACN,OAAN,GAAgB,EAAhB;AACAZ,MAAAA,YAAY,CAACmB,UAAb,CAAwBvB,WAAW,CAACQ,IAApC;AACAJ,MAAAA,YAAY,CAACmB,UAAb,CAAwBvB,WAAW,CAACM,KAApC;AACH;;AANK,GANgB;AAc1BkB,EAAAA,aAAa,EAAE;AACX;AACA,KAACvB,QAAQ,CAACwB,SAAV,GAAsB,CAACH,KAAD,EAAQI,MAAR,KAAmB;AACrCJ,MAAAA,KAAK,CAACN,OAAN,GAAgBU,MAAM,CAACxB,OAAvB;AACH,KAJU;AAMX,KAACU,KAAK,CAACa,SAAP,GAAmB,CAACH,KAAD,EAAQI,MAAR,KAAmB;AAClCJ,MAAAA,KAAK,CAACN,OAAN,GAAgBU,MAAM,CAACxB,OAAvB;AACH;AARU;AAdW,CAAD,CAA7B;AA0BA,MAAM;AAAEyB,EAAAA,OAAF;AAAWC,EAAAA;AAAX,IAAuBf,SAA7B;AACA,OAAO,MAAM;AAACQ,EAAAA;AAAD,IAAWM,OAAjB;AACP,eAAeC,OAAf","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport userApi from '../../api/useApi';\nimport StorageKeys from '../../constants/storage-keys';\n\n\nexport const register = createAsyncThunk(\n    'users/register',\n    async (payload) => {\n        //call api to register\n        const data = await userApi.register(payload);\n        //save data to local storage\n        localStorage.setItem(StorageKeys.TOKEN, data.jwt);\n        localStorage.setItem(StorageKeys.USER, JSON.stringify(data.user));\n        return data.user;\n    }\n)\n\n\nexport const login = createAsyncThunk(\n    'users/login',\n    async (payload) => {\n        //call api to register\n        const data = await userApi.login(payload);\n        //save data to local storage\n        localStorage.setItem(StorageKeys.TOKEN, data.jwt);\n        localStorage.setItem(StorageKeys.USER, JSON.stringify(data.user));\n        return data.user;\n    }\n)\n\nconst userSlice = createSlice({\n    name: 'user',\n    initialState: {\n        current: JSON.parse(localStorage.getItem(StorageKeys.USER)) || {},\n        settings: {},\n    },\n    reducers: {\n        logout(state) {\n            //clear local storage\n            state.current = {}\n            localStorage.removeItem(StorageKeys.USER)\n            localStorage.removeItem(StorageKeys.TOKEN)\n        }\n    },\n    extraReducers: {\n        //'user/register/fulfilled': () => {}\n        [register.fulfilled]: (state, action) => {\n            state.current = action.payload;\n        },\n\n        [login.fulfilled]: (state, action) => {\n            state.current = action.payload;\n        }\n    }\n})\n\nconst { actions, reducer } = userSlice\nexport const {logout} = actions\nexport default reducer"]},"metadata":{},"sourceType":"module"}