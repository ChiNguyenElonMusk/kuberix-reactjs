{"ast":null,"code":"import axios from 'axios';\nconst axiosClient = axios.create({\n  baseURL: 'https://api.ezfrontend.com/',\n  headers: {\n    'content-type': 'application/json'\n  }\n}); // Add a request interceptor\n\naxiosClient.interceptors.request.use(function (config) {\n  // Do something before request is sent\n  return config;\n}, function (error) {\n  // Do something with request error\n  return Promise.reject(error);\n}); // Add a response interceptor\n\naxiosClient.interceptors.response.use(function (response) {\n  // Any status code that lie within the range of 2xx cause this function to trigger\n  // Do something with response data\n  return response.data;\n}, function (error) {\n  // Any status codes that falls outside the range of 2xx cause this function to trigger\n  // Do something with response error\n  const {\n    config,\n    status,\n    data\n  } = error.response;\n  const urls = ['/auth/local/register', '/auth/local'];\n\n  if (urls.includes(config.url) && status === 400) {\n    const errorList = data.data || [];\n    const firstError = errorList.length > 0 ? errorList[0] : {};\n    const messageList = firstError.messages || [];\n    const firstMessage = messageList.length > 0 ? messageList[0] : {};\n    throw new Error(firstMessage.message);\n  }\n\n  return Promise.reject(error);\n});\nexport default axiosClient;","map":{"version":3,"sources":["/Users/mz01-chinh/Desktop/reactjs-base-21-main/src/api/axiosClient.js"],"names":["axios","axiosClient","create","baseURL","headers","interceptors","request","use","config","error","Promise","reject","response","data","status","urls","includes","url","errorList","firstError","length","messageList","messages","firstMessage","Error","message"],"mappings":"AACA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,WAAW,GAAGD,KAAK,CAACE,MAAN,CAAa;AAC7BC,EAAAA,OAAO,EAAE,6BADoB;AAE7BC,EAAAA,OAAO,EAAE;AACL,oBAAgB;AADX;AAFoB,CAAb,CAApB,C,CAOA;;AACAH,WAAW,CAACI,YAAZ,CAAyBC,OAAzB,CAAiCC,GAAjC,CAAqC,UAAUC,MAAV,EAAkB;AACnD;AACA,SAAOA,MAAP;AACH,CAHD,EAGG,UAAUC,KAAV,EAAiB;AAChB;AACA,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACH,CAND,E,CAQA;;AACAR,WAAW,CAACI,YAAZ,CAAyBO,QAAzB,CAAkCL,GAAlC,CAAsC,UAAUK,QAAV,EAAoB;AACtD;AACA;AACA,SAAOA,QAAQ,CAACC,IAAhB;AACH,CAJD,EAIG,UAAUJ,KAAV,EAAiB;AAChB;AACA;AACA,QAAM;AAACD,IAAAA,MAAD;AAASM,IAAAA,MAAT;AAAiBD,IAAAA;AAAjB,MAAyBJ,KAAK,CAACG,QAArC;AACA,QAAMG,IAAI,GAAG,CAAC,sBAAD,EAAyB,aAAzB,CAAb;;AACA,MAAGA,IAAI,CAACC,QAAL,CAAcR,MAAM,CAACS,GAArB,KAA8BH,MAAM,KAAK,GAA5C,EAAgD;AAC5C,UAAMI,SAAS,GAAGL,IAAI,CAACA,IAAL,IAAa,EAA/B;AACA,UAAMM,UAAU,GAAGD,SAAS,CAACE,MAAV,GAAmB,CAAnB,GAAuBF,SAAS,CAAC,CAAD,CAAhC,GAAqC,EAAxD;AACA,UAAMG,WAAW,GAAGF,UAAU,CAACG,QAAX,IAAuB,EAA3C;AACA,UAAMC,YAAY,GAAGF,WAAW,CAACD,MAAZ,GAAqB,CAArB,GAAyBC,WAAW,CAAC,CAAD,CAApC,GAA0C,EAA/D;AACA,UAAM,IAAIG,KAAJ,CAAUD,YAAY,CAACE,OAAvB,CAAN;AACH;;AACD,SAAOf,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACH,CAjBD;AAmBA,eAAeR,WAAf","sourcesContent":["\nimport axios from 'axios';\n\nconst axiosClient = axios.create({\n    baseURL: 'https://api.ezfrontend.com/',\n    headers: {\n        'content-type': 'application/json',\n    }\n})\n\n// Add a request interceptor\naxiosClient.interceptors.request.use(function (config) {\n    // Do something before request is sent\n    return config;\n}, function (error) {\n    // Do something with request error\n    return Promise.reject(error);\n});\n\n// Add a response interceptor\naxiosClient.interceptors.response.use(function (response) {\n    // Any status code that lie within the range of 2xx cause this function to trigger\n    // Do something with response data\n    return response.data;\n}, function (error) {\n    // Any status codes that falls outside the range of 2xx cause this function to trigger\n    // Do something with response error\n    const {config, status, data} = error.response;\n    const urls = ['/auth/local/register', '/auth/local',]\n    if(urls.includes(config.url)  && status === 400){\n        const errorList = data.data || [];\n        const firstError = errorList.length > 0 ? errorList[0]: {};\n        const messageList = firstError.messages || []\n        const firstMessage = messageList.length > 0 ? messageList[0] : {}\n        throw new Error(firstMessage.message);\n    }\n    return Promise.reject(error);\n});\n\nexport default axiosClient"]},"metadata":{},"sourceType":"module"}